/*
 * This file is generated by jOOQ.
*/
package com.github.ssullivan.mbt.gtfs.db.tables;


import com.github.ssullivan.mbt.gtfs.db.Codegen;
import com.github.ssullivan.mbt.gtfs.db.Keys;
import com.github.ssullivan.mbt.gtfs.db.tables.records.AdherenceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adherence extends TableImpl<AdherenceRecord> {

    private static final long serialVersionUID = -1003271429;

    /**
     * The reference instance of <code>codegen.adherence</code>
     */
    public static final Adherence ADHERENCE = new Adherence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdherenceRecord> getRecordType() {
        return AdherenceRecord.class;
    }

    /**
     * The column <code>codegen.adherence.date</code>.
     */
    public final TableField<AdherenceRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.hour</code>.
     */
    public final TableField<AdherenceRecord, Byte> HOUR = createField("hour", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.route_id</code>.
     */
    public final TableField<AdherenceRecord, String> ROUTE_ID = createField("route_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.direction_id</code>.
     */
    public final TableField<AdherenceRecord, Byte> DIRECTION_ID = createField("direction_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.stop_id</code>.
     */
    public final TableField<AdherenceRecord, Integer> STOP_ID = createField("stop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.early</code>.
     */
    public final TableField<AdherenceRecord, Integer> EARLY = createField("early", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.on_time</code>.
     */
    public final TableField<AdherenceRecord, Integer> ON_TIME = createField("on_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>codegen.adherence.late</code>.
     */
    public final TableField<AdherenceRecord, Integer> LATE = createField("late", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>codegen.adherence</code> table reference
     */
    public Adherence() {
        this("adherence", null);
    }

    /**
     * Create an aliased <code>codegen.adherence</code> table reference
     */
    public Adherence(String alias) {
        this(alias, ADHERENCE);
    }

    private Adherence(String alias, Table<AdherenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Adherence(String alias, Table<AdherenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Codegen.CODEGEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AdherenceRecord> getPrimaryKey() {
        return Keys.ADHERENCE_PRIMARY_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AdherenceRecord>> getKeys() {
        return Arrays.<UniqueKey<AdherenceRecord>>asList(Keys.ADHERENCE_PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Adherence as(String alias) {
        return new Adherence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adherence rename(String name) {
        return new Adherence(name, null);
    }
}
