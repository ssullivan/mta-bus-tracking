/*
 * This file is generated by jOOQ.
*/
package com.github.ssullivan.mbt.gtfs.db.tables;


import com.github.ssullivan.mbt.gtfs.db.Codegen;
import com.github.ssullivan.mbt.gtfs.db.Keys;
import com.github.ssullivan.mbt.gtfs.db.tables.records.EventsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 2146795722;

    /**
     * The reference instance of <code>codegen.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>codegen.events.service_date</code>.
     */
    public final TableField<EventsRecord, Timestamp> SERVICE_DATE = createField("service_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>codegen.events.trip_index</code>.
     */
    public final TableField<EventsRecord, Long> TRIP_INDEX = createField("trip_index", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>codegen.events.vehicle_id</code>.
     */
    public final TableField<EventsRecord, Integer> VEHICLE_ID = createField("vehicle_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>codegen.events.stop_id</code>.
     */
    public final TableField<EventsRecord, Integer> STOP_ID = createField("stop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>codegen.events.est_dep_utc</code>.
     */
    public final TableField<EventsRecord, Timestamp> EST_DEP_UTC = createField("est_dep_utc", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>codegen.events.dep_accuracy</code>.
     */
    public final TableField<EventsRecord, Integer> DEP_ACCURACY = createField("dep_accuracy", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>codegen.events.sched_dep_utc</code>.
     */
    public final TableField<EventsRecord, Timestamp> SCHED_DEP_UTC = createField("sched_dep_utc", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>codegen.events.sched_dep_date</code>.
     */
    public final TableField<EventsRecord, Timestamp> SCHED_DEP_DATE = createField("sched_dep_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>codegen.events.sched_dep_hour</code>.
     */
    public final TableField<EventsRecord, Byte> SCHED_DEP_HOUR = createField("sched_dep_hour", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>codegen.events.route_id</code>.
     */
    public final TableField<EventsRecord, String> ROUTE_ID = createField("route_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>codegen.events.direction_id</code>.
     */
    public final TableField<EventsRecord, Boolean> DIRECTION_ID = createField("direction_id", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>codegen.events</code> table reference
     */
    public Events() {
        this("events", null);
    }

    /**
     * Create an aliased <code>codegen.events</code> table reference
     */
    public Events(String alias) {
        this(alias, EVENTS);
    }

    private Events(String alias, Table<EventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Events(String alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Codegen.CODEGEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.EVENTS_PRIMARY_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventsRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsRecord>>asList(Keys.EVENTS_PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Events as(String alias) {
        return new Events(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(name, null);
    }
}
