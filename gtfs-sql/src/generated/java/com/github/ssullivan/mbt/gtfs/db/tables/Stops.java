/*
 * This file is generated by jOOQ.
*/
package com.github.ssullivan.mbt.gtfs.db.tables;


import com.github.ssullivan.mbt.gtfs.db.Keys;
import com.github.ssullivan.mbt.gtfs.db.Public;
import com.github.ssullivan.mbt.gtfs.db.tables.records.StopsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stops extends TableImpl<StopsRecord> {

    private static final long serialVersionUID = 1756101230;

    /**
     * The reference instance of <code>public.stops</code>
     */
    public static final Stops STOPS = new Stops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StopsRecord> getRecordType() {
        return StopsRecord.class;
    }

    /**
     * The column <code>public.stops.feed_index</code>.
     */
    public final TableField<StopsRecord, Long> FEED_INDEX = createField("feed_index", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.stops.stop_index</code>.
     */
    public final TableField<StopsRecord, Long> STOP_INDEX = createField("stop_index", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('codegen.stops_stop_index_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.stops.stop_id</code>.
     */
    public final TableField<StopsRecord, Integer> STOP_ID = createField("stop_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.stops.stop_code</code>.
     */
    public final TableField<StopsRecord, String> STOP_CODE = createField("stop_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.stops.stop_name</code>.
     */
    public final TableField<StopsRecord, String> STOP_NAME = createField("stop_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.stops.stop_desc</code>.
     */
    public final TableField<StopsRecord, String> STOP_DESC = createField("stop_desc", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.stops.stop_lat</code>.
     */
    public final TableField<StopsRecord, Double> STOP_LAT = createField("stop_lat", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.stops.stop_lon</code>.
     */
    public final TableField<StopsRecord, Double> STOP_LON = createField("stop_lon", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.stops.zone_id</code>.
     */
    public final TableField<StopsRecord, Integer> ZONE_ID = createField("zone_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.stops.stop_url</code>.
     */
    public final TableField<StopsRecord, String> STOP_URL = createField("stop_url", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.stops.location_type</code>.
     */
    public final TableField<StopsRecord, Integer> LOCATION_TYPE = createField("location_type", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.stops.parent_station</code>.
     */
    public final TableField<StopsRecord, Integer> PARENT_STATION = createField("parent_station", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.stops</code> table reference
     */
    public Stops() {
        this("stops", null);
    }

    /**
     * Create an aliased <code>public.stops</code> table reference
     */
    public Stops(String alias) {
        this(alias, STOPS);
    }

    private Stops(String alias, Table<StopsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stops(String alias, Table<StopsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StopsRecord, Long> getIdentity() {
        return Keys.IDENTITY_STOPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StopsRecord> getPrimaryKey() {
        return Keys.STOPS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StopsRecord>> getKeys() {
        return Arrays.<UniqueKey<StopsRecord>>asList(Keys.FEED_STOP_UNIQUE, Keys.STOPS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stops as(String alias) {
        return new Stops(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stops rename(String name) {
        return new Stops(name, null);
    }
}
