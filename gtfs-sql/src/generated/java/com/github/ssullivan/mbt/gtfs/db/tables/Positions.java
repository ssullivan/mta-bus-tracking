/*
 * This file is generated by jOOQ.
*/
package com.github.ssullivan.mbt.gtfs.db.tables;


import com.github.ssullivan.mbt.gtfs.db.Keys;
import com.github.ssullivan.mbt.gtfs.db.Public;
import com.github.ssullivan.mbt.gtfs.db.tables.records.PositionsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Positions extends TableImpl<PositionsRecord> {

    private static final long serialVersionUID = 320948361;

    /**
     * The reference instance of <code>public.positions</code>
     */
    public static final Positions POSITIONS = new Positions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionsRecord> getRecordType() {
        return PositionsRecord.class;
    }

    /**
     * The column <code>public.positions.timestamp_utc</code>.
     */
    public final TableField<PositionsRecord, Timestamp> TIMESTAMP_UTC = createField("timestamp_utc", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.positions.vehicle_id</code>.
     */
    public final TableField<PositionsRecord, Integer> VEHICLE_ID = createField("vehicle_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.positions.latitude</code>.
     */
    public final TableField<PositionsRecord, Double> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.positions.longitude</code>.
     */
    public final TableField<PositionsRecord, Double> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.positions.bearing</code>.
     */
    public final TableField<PositionsRecord, Double> BEARING = createField("bearing", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.positions.progress</code>.
     */
    public final TableField<PositionsRecord, Byte> PROGRESS = createField("progress", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>public.positions.service_date</code>.
     */
    public final TableField<PositionsRecord, Timestamp> SERVICE_DATE = createField("service_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.positions.trip_index</code>.
     */
    public final TableField<PositionsRecord, Long> TRIP_INDEX = createField("trip_index", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.positions.block_assigned</code>.
     */
    public final TableField<PositionsRecord, Byte> BLOCK_ASSIGNED = createField("block_assigned", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>public.positions.next_stop_id</code>.
     */
    public final TableField<PositionsRecord, Integer> NEXT_STOP_ID = createField("next_stop_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.positions.dist_along_route</code>.
     */
    public final TableField<PositionsRecord, Double> DIST_ALONG_ROUTE = createField("dist_along_route", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.positions.dist_from_stop</code>.
     */
    public final TableField<PositionsRecord, Double> DIST_FROM_STOP = createField("dist_from_stop", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>public.positions</code> table reference
     */
    public Positions() {
        this("positions", null);
    }

    /**
     * Create an aliased <code>public.positions</code> table reference
     */
    public Positions(String alias) {
        this(alias, POSITIONS);
    }

    private Positions(String alias, Table<PositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Positions(String alias, Table<PositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PositionsRecord> getPrimaryKey() {
        return Keys.POSITIONS_PRIMARY_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PositionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PositionsRecord>>asList(Keys.POSITIONS_PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Positions as(String alias) {
        return new Positions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Positions rename(String name) {
        return new Positions(name, null);
    }
}
